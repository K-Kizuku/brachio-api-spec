syntax = "proto3";

package websocket.payload.playing;

import "messages/card.proto";
import "messages/ability.proto";
import "messages/effect.proto";
import "messages/common.proto";
import "google/protobuf/empty.proto";

message AttackMonsterPayload {
  // 攻撃者のモンスター
  int32 attacker_position = 1;
  // 技のインデックス
  int32 skill = 2;

  repeated int32 targetsDamages = 3;
}

message SummonMonsterPayload {
  // 召喚するモンスター
  messages.card.Card card = 1;
  // 召喚する場所
  int32 position = 2;
}

message EvolutionMonsterPayload {
  // 進化するモンスター
  messages.card.Card card = 1;
  // 進化する場所
  int32 position = 2;
}

message TakeSupportPayload {
  // サポートカード
  messages.card.Card card = 1;
  // サポートの対象のカードのID
  repeated int32 positions = 2;
}

message TakeGoodsPayload {
  // アイテム
  messages.card.Card card = 1;
  // グッズ効果の対象のカード
  repeated int32 positions = 2;
}

message RetreatPayload {
  // 退却するモンスター
  messages.card.Card card = 1;
  // 逃げる場所
  int32 position = 2;
}

message SupplyEnergys { repeated messages.common.Element energies = 1; }

message SupplyEnergyPayload {
  // 供給するエネルギー(ポジションベース length4)
  repeated SupplyEnergys supplys = 1;
}

message SurrenderPayload {
  // 降参するユーザーのID
  string userId = 1;
}

message AbilityPayload {
  // 発動するラムモン
  int32 position = 1;
  // 発動する特性
  messages.ability.Ability ability = 2;
}

message DrawCardPayload {
  // 山札から引くカードの枚数
  int32 count = 1;
  // 山札の残り枚数
  int32 remain = 2;
}

message DrawCardIndividualPayload {
  // 山札から引くカードの枚数
  int32 count = 1;
  // 山札から引くカード
  repeated messages.card.Card cards = 2;
  // 山札の残り枚数
  int32 remain = 3;
}

message ConfirmActionPayload { repeated Action actions = 1; }

enum ActionType {
  UNKNOWN = 0;
  ATTACK_MONSTER = 1;
  SUMMON_MONSTER = 2;
  EVOLUTION_MONSTER = 3;
  TAKE_SUPPORT = 4;
  TAKE_GOODS = 5;
  RETREAT = 6;
  SUPPLY_ENERGY = 7;
  SURRENDER = 8;
  ABILITY = 9;
  DRAW = 10;
}

message Action {
  ActionType type = 1;
  // 行動するラムモンorアイテム
  optional int32 position = 2;
}

message CoinTossPayload { repeated bool results = 1; }

message CoinTossEmptyPayload { google.protobuf.Empty empty = 1; }

message StartGamePayload { google.protobuf.Empty empty = 1; }

message InitialPlacementCompletePayload { google.protobuf.Empty empty = 1; }

message TurnStartPayload {
  // ターンプレイヤーのID
  string userId = 1;
  // 発動するイベントの原因となるカード
  repeated messages.card.Card cards = 2;
  // イベントの原因となる特性
  repeated messages.ability.Ability abilities = 3;
}

message TurnEndPayload {
  // ターンプレイヤーのID
  string userId = 1;
  // 発動するイベントの原因となるカード
  repeated messages.card.Card cards = 2;
  // イベントの原因となる特性
  repeated messages.ability.Ability abilities = 3;
}

message ConfirmEnergyResponsePayload {
  // エネルギーを供給するモンスター
  messages.card.Card card = 1;
  // 供給するエネルギー
  repeated messages.common.Element energies = 2;
}

message ConfirmEnergyRequestPayload {
  // エネルギーを供給するモンスター
  messages.card.Card card = 1;
  // 必要なエネルギー
  repeated messages.common.Element energies = 2;
}

message ConfirmTargetResponsePayload {
  // 対象となるカード
  int32 position = 1;
  // ターゲットとなるカード
  repeated int32 target_positions = 2;
}

message ConfirmTargetRequestPayload {
  // 対象となるカード
  int32 position = 1;
  // 必要なターゲット数
  int32 count = 2;
}

message NextEnergyPayload {
  // 次のエネルギー
  messages.common.Element energy = 1;
}

message DrawEffectPayloadToRecipient {
  repeated messages.effect.Effect effects = 1;
}

message DrawEffectPayloadToActor {
  repeated messages.effect.EffectWithSecret effects = 1;
}
